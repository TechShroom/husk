buildscript {
    repositories {
        mavenCentral()
        maven {
            name "central snapshots"
            url "https://oss.sonatype.org/content/repositories/snapshots/"
        }
    }

    dependencies {
        classpath group: 'com.techshroom', name: 'Aversion', version: '3.0.0'
    }
}
plugins {
    id "com.github.hierynomus.license" version "0.13.1"
    id 'net.researchgate.release' version '2.4.0'
}
apply plugin: 'jacoco'
apply plugin: 'aversion-apt'
apply plugin: 'aversion-maven'
apply plugin: 'aversion-util'
apply plugin: 'idea'
apply plugin: 'antlr'

util {
    javaVersion = '1.8'
}
idea.project.languageLevel = util.javaVersion

mavencfg {
    description 'A programming language inspired by C, Java, Haskell, and Python.'
    coords 'TechShroom', 'husk'
}

defaultTasks 'clean', 'licenseFormat', 'build'

configurations.all {
    resolutionStrategy {
        cacheChangingModulesFor 0, 'seconds'
    }
}

repositories {
    mavenCentral()
    maven {
        name "central snapshots"
        url "https://oss.sonatype.org/content/repositories/snapshots/"
    }
}

ext.antlr = '4.5.3'
dependencies {
    compile group: 'org.slf4j', name: 'slf4j-api', version: '1.7.21'
    compileOnly group: 'com.techshroom', name: 'jsr305-plus', version: '0.0.1'

    antlr group: 'org.antlr', name: 'antlr4', version: antlr
    compile group: 'org.antlr', name: 'antlr4-runtime', version: antlr

    addAPTReqWComp group: 'com.google.guava', name: 'guava', version: '19.0'
    addAPT group: 'com.google.auto.service', name: 'auto-service', version: '1.0-SNAPSHOT'
    addAPT group: 'com.google.auto.value', name: 'auto-value', version: '1.3'
    addAPTReq name: 'aopalliance'
    addAPTReq name: 'asm'
    addAPTReq name: 'auto-value'
    addAPTReq name: 'auto-common'
    addAPTReq name: 'cglib'
    addAPTReq name: 'commons-collections'
    addAPTReq name: 'commons-lang'
    addAPTReq name: 'dagger'
    addAPTReq name: 'javawriter'
    addAPTReq name: 'javax.inject'
    addAPTReq name: 'velocity'

    testCompile group: 'junit', name: 'junit', version: '4.12'
}

javadoc {
    options.addStringOption('Xdoclint:none', '-quiet')
}

configure([compileJava, compileTestJava]) {
    options.compilerArgs += ['-Xlint:all', '-Xlint:-path']
    options.deprecation = true
    options.encoding = 'UTF-8'
    options.incremental = true
    options.fork = true
}

// ANTLR FIXES
ext.antlrSrcDir = '.antlr_generated'
ext.antlrSrcDir2 = 'src/main/generated/antlr'
sourceSets.main.java.srcDir antlrSrcDir2

generateGrammarSource {
    outputDirectory = file(antlrSrcDir)
}

// A bad hack because gradle sux with antlr
tasks.getByPath('generateGrammarSource') << {
    delete antlrSrcDir2 + '/me'
    copy {
        from antlrSrcDir
        into antlrSrcDir2 + '/me/kenzierocks/hnbt/grammar'
    }
    delete antlrSrcDir
}

eclipse.classpath.file.withXml { provider ->
    def ignoreOptCompileWarns = '''
        <attributes>
            <attribute name="ignore_optional_problems" value="true"/>
            <attribute name="optional" value="true"/>
        </attributes>
    '''
    ignoreOptCompileWarns = new XmlParser(false, true).parseText(ignoreOptCompileWarns)
    provider.asNode().classpathentry.find { it.@path == antlrSrcDir2 }.children().add(0, ignoreOptCompileWarns)
}
eclipse.classpath {
    minusConfigurations += [configurations.antlr]
}

// END ANTLR FIXES

license {
    ext {
        name = project.name
        organization = project.organization
        url = project.url
    }
    header = rootProject.file('HEADER.txt')
    ignoreFailures = false
    strictCheck = true
    include '**/*.java'
    mapping {
        java = 'SLASHSTAR_STYLE'
    }
}

jacocoTestReport {
    reports {
        xml.enabled = true
        html.enabled = true
    }
}
check.dependsOn jacocoTestReport
